 //////////////////////////////////////////////////////////////////////////////
 // Project:  Aurora 64B/66B
 // Company:  Xilinx
 //
 //
 //
 // (c) Copyright 2008 - 2009 Xilinx, Inc. All rights reserved.
 //
 // This file contains confidential and proprietary information
 // of Xilinx, Inc. and is protected under U.S. and
 // international copyright and other intellectual property
 // laws.
 //
 // DISCLAIMER
 // This disclaimer is not a license and does not grant any
 // rights to the materials distributed herewith. Except as
 // otherwise provided in a valid license issued to you by
 // Xilinx, and to the maximum extent permitted by applicable
 // law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
 // WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
 // AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
 // BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
 // INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
 // (2) Xilinx shall not be liable (whether in contract or tort,
 // including negligence, or under any other theory of
 // liability) for any loss or damage of any kind or nature
 // related to, arising under or in connection with these
 // materials, including for any direct, or any indirect,
 // special, incidental, or consequential loss or damage
 // (including loss of data, profits, goodwill, or any type of
 // loss or damage suffered as a result of any action brought
 // by a third party) even if such damage or loss was
 // reasonably foreseeable or Xilinx had been advised of the
 // possibility of the same.
 //
 // CRITICAL APPLICATIONS
 // Xilinx products are not designed or intended to be fail-
 // safe, or for use in any application requiring fail-safe
 // performance, such as life-support or safety devices or
 // systems, Class III medical devices, nuclear facilities,
 // applications related to the deployment of airbags, or any
 // other applications that could lead to death, personal
 // injury, or severe property or environmental damage
 // (individually and collectively, "Critical
 // Applications"). Customer assumes the sole risk and
 // liability of any use of Xilinx products in Critical
 // Applications, subject only to applicable laws and
 // regulations governing limitations on product liability.
 //
 // THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
 // PART OF THIS FILE AT ALL TIMES.
 
 //
 //////////////////////////////////////////////////////////////////////////////
 //
 //  FRAME CHECK
 //
 //
 //
 //  Description: This module is a  pattern checker to test the Aurora
 //               designs in hardware. The frames generated by FRAME_GEN
 //               pass through the Aurora channel and arrive at the frame checker 
 //               through the RX User interface. Every time an error is found in
 //               the data recieved, the error count is incremented until it 
 //               reaches its max value.
 //////////////////////////////////////////////////////////////////////////////
 
 `timescale 1 ns / 10 ps
 `define DLY #1
 
(* DowngradeIPIdentifiedWarnings="yes" *)
 module aurora_64b66b_0_FRAME_CHECK #
 (
     parameter            DATA_WIDTH         = 16, // DATA bus width
     parameter            STRB_WIDTH         = 2 // STROBE bus width
 )
 (
     // User Interface
     AXI4_S_IP_TX_TVALID,
     AXI4_S_IP_TX_TREADY,
     AXI4_S_IP_TX_TDATA,
     DATA_ERR_COUNT,
 
 
 
     // System Interface
     CHANNEL_UP,
     USER_CLK,       
     RESET
   
 );
 //*********************** Parameter Declarations************************
     parameter            AURORA_LANES    = 4;
     parameter            LANE_DATA_WIDTH = (AURORA_LANES*64);
     parameter            REM_BUS         = 5;
 
 //***********************************Port Declarations*******************************
     //PDU Interface
     input   [(DATA_WIDTH-1):0]     AXI4_S_IP_TX_TDATA;
     input                          AXI4_S_IP_TX_TVALID;
     output                         AXI4_S_IP_TX_TREADY;
     
     //System Interface
     input                              CHANNEL_UP; 
     input                              USER_CLK; 
     input                              RESET;  
     output    [0:8-1]         DATA_ERR_COUNT;
 
 //***************************Internal Register Declarations*************************** 
     reg     [0:LANE_DATA_WIDTH-1]    rx_d_reg;
     reg                              rx_src_rdy_n_reg; 
     reg       [0:8-1]        data_err_count_r; 
     reg       [0:AURORA_LANES-1]                  data_err_r;
 
     //PDU interface signals
     wire      [0:8-1]         DATA_ERR_COUNT; 
     reg       [0:15]                   pdu_lfsr_r;
     wire      [LANE_DATA_WIDTH-1:0]    pdu_cmp_data_w;
     wire      [0:LANE_DATA_WIDTH-1]    pdu_cmp_data_w_r;
     wire      [0:AURORA_LANES-1]                   data_err_c;
     wire                               reset_i; 
     wire                               RESET_ii; 


     wire   [0:(DATA_WIDTH-1)]     AXI4_S_IP_TX_TDATA_i;
     wire   [0:(STRB_WIDTH-1)]     AXI4_S_IP_TX_TKEEP_i;

 //*********************************Main Body of Code**********************************
 

generate
  genvar i;
  for (i=0; i<STRB_WIDTH; i=i+1) begin: pdu_keep
    assign AXI4_S_IP_TX_TKEEP_i[i] = 1'b1;
end
endgenerate

generate
  genvar j;
  for (j=0; j<STRB_WIDTH; j=j+1) begin: pdu_data
    assign AXI4_S_IP_TX_TDATA_i[((STRB_WIDTH-1-j)*8):((STRB_WIDTH-1-j)*8)+7] = AXI4_S_IP_TX_TDATA[((STRB_WIDTH-1-j)*8)+7:((STRB_WIDTH-1-j)*8)];
end
endgenerate



 
   assign reset_i = RESET || (!CHANNEL_UP);
   assign resetUFC = reset_i; 

    assign RESET_ii = RESET ; 

  /*****************************PDU Data Genetration & Checking**********************/


     
     always @ (posedge USER_CLK)
       begin
         rx_d_reg <= `DLY AXI4_S_IP_TX_TDATA_i;
         rx_src_rdy_n_reg <= `DLY !AXI4_S_IP_TX_TVALID;
       end

     //Generate the PDU data using LFSR for data comparision
     always @ (posedge USER_CLK)
        if(reset_i)
          pdu_lfsr_r  <=  `DLY  16'hABCD;
        else if(!rx_src_rdy_n_reg)
          pdu_lfsr_r  <=  `DLY  {!{pdu_lfsr_r[3]^pdu_lfsr_r[12]^pdu_lfsr_r[14]^pdu_lfsr_r[15]}, 
                            pdu_lfsr_r[0:14]};
 
     assign pdu_cmp_data_w = {AURORA_LANES*4{pdu_lfsr_r}};

     assign pdu_cmp_data_w_r = {
       pdu_cmp_data_w[255], 
       pdu_cmp_data_w[254], 
       pdu_cmp_data_w[253], 
       pdu_cmp_data_w[252], 
       pdu_cmp_data_w[251], 
       pdu_cmp_data_w[250], 
       pdu_cmp_data_w[249], 
       pdu_cmp_data_w[248], 
       pdu_cmp_data_w[247], 
       pdu_cmp_data_w[246], 
       pdu_cmp_data_w[245], 
       pdu_cmp_data_w[244], 
       pdu_cmp_data_w[243], 
       pdu_cmp_data_w[242], 
       pdu_cmp_data_w[241], 
       pdu_cmp_data_w[240], 
       pdu_cmp_data_w[239], 
       pdu_cmp_data_w[238], 
       pdu_cmp_data_w[237], 
       pdu_cmp_data_w[236], 
       pdu_cmp_data_w[235], 
       pdu_cmp_data_w[234], 
       pdu_cmp_data_w[233], 
       pdu_cmp_data_w[232], 
       pdu_cmp_data_w[231], 
       pdu_cmp_data_w[230], 
       pdu_cmp_data_w[229], 
       pdu_cmp_data_w[228], 
       pdu_cmp_data_w[227], 
       pdu_cmp_data_w[226], 
       pdu_cmp_data_w[225], 
       pdu_cmp_data_w[224], 
       pdu_cmp_data_w[223], 
       pdu_cmp_data_w[222], 
       pdu_cmp_data_w[221], 
       pdu_cmp_data_w[220], 
       pdu_cmp_data_w[219], 
       pdu_cmp_data_w[218], 
       pdu_cmp_data_w[217], 
       pdu_cmp_data_w[216], 
       pdu_cmp_data_w[215], 
       pdu_cmp_data_w[214], 
       pdu_cmp_data_w[213], 
       pdu_cmp_data_w[212], 
       pdu_cmp_data_w[211], 
       pdu_cmp_data_w[210], 
       pdu_cmp_data_w[209], 
       pdu_cmp_data_w[208], 
       pdu_cmp_data_w[207], 
       pdu_cmp_data_w[206], 
       pdu_cmp_data_w[205], 
       pdu_cmp_data_w[204], 
       pdu_cmp_data_w[203], 
       pdu_cmp_data_w[202], 
       pdu_cmp_data_w[201], 
       pdu_cmp_data_w[200], 
       pdu_cmp_data_w[199], 
       pdu_cmp_data_w[198], 
       pdu_cmp_data_w[197], 
       pdu_cmp_data_w[196], 
       pdu_cmp_data_w[195], 
       pdu_cmp_data_w[194], 
       pdu_cmp_data_w[193], 
       pdu_cmp_data_w[192], 
       pdu_cmp_data_w[191], 
       pdu_cmp_data_w[190], 
       pdu_cmp_data_w[189], 
       pdu_cmp_data_w[188], 
       pdu_cmp_data_w[187], 
       pdu_cmp_data_w[186], 
       pdu_cmp_data_w[185], 
       pdu_cmp_data_w[184], 
       pdu_cmp_data_w[183], 
       pdu_cmp_data_w[182], 
       pdu_cmp_data_w[181], 
       pdu_cmp_data_w[180], 
       pdu_cmp_data_w[179], 
       pdu_cmp_data_w[178], 
       pdu_cmp_data_w[177], 
       pdu_cmp_data_w[176], 
       pdu_cmp_data_w[175], 
       pdu_cmp_data_w[174], 
       pdu_cmp_data_w[173], 
       pdu_cmp_data_w[172], 
       pdu_cmp_data_w[171], 
       pdu_cmp_data_w[170], 
       pdu_cmp_data_w[169], 
       pdu_cmp_data_w[168], 
       pdu_cmp_data_w[167], 
       pdu_cmp_data_w[166], 
       pdu_cmp_data_w[165], 
       pdu_cmp_data_w[164], 
       pdu_cmp_data_w[163], 
       pdu_cmp_data_w[162], 
       pdu_cmp_data_w[161], 
       pdu_cmp_data_w[160], 
       pdu_cmp_data_w[159], 
       pdu_cmp_data_w[158], 
       pdu_cmp_data_w[157], 
       pdu_cmp_data_w[156], 
       pdu_cmp_data_w[155], 
       pdu_cmp_data_w[154], 
       pdu_cmp_data_w[153], 
       pdu_cmp_data_w[152], 
       pdu_cmp_data_w[151], 
       pdu_cmp_data_w[150], 
       pdu_cmp_data_w[149], 
       pdu_cmp_data_w[148], 
       pdu_cmp_data_w[147], 
       pdu_cmp_data_w[146], 
       pdu_cmp_data_w[145], 
       pdu_cmp_data_w[144], 
       pdu_cmp_data_w[143], 
       pdu_cmp_data_w[142], 
       pdu_cmp_data_w[141], 
       pdu_cmp_data_w[140], 
       pdu_cmp_data_w[139], 
       pdu_cmp_data_w[138], 
       pdu_cmp_data_w[137], 
       pdu_cmp_data_w[136], 
       pdu_cmp_data_w[135], 
       pdu_cmp_data_w[134], 
       pdu_cmp_data_w[133], 
       pdu_cmp_data_w[132], 
       pdu_cmp_data_w[131], 
       pdu_cmp_data_w[130], 
       pdu_cmp_data_w[129], 
       pdu_cmp_data_w[128], 
       pdu_cmp_data_w[127], 
       pdu_cmp_data_w[126], 
       pdu_cmp_data_w[125], 
       pdu_cmp_data_w[124], 
       pdu_cmp_data_w[123], 
       pdu_cmp_data_w[122], 
       pdu_cmp_data_w[121], 
       pdu_cmp_data_w[120], 
       pdu_cmp_data_w[119], 
       pdu_cmp_data_w[118], 
       pdu_cmp_data_w[117], 
       pdu_cmp_data_w[116], 
       pdu_cmp_data_w[115], 
       pdu_cmp_data_w[114], 
       pdu_cmp_data_w[113], 
       pdu_cmp_data_w[112], 
       pdu_cmp_data_w[111], 
       pdu_cmp_data_w[110], 
       pdu_cmp_data_w[109], 
       pdu_cmp_data_w[108], 
       pdu_cmp_data_w[107], 
       pdu_cmp_data_w[106], 
       pdu_cmp_data_w[105], 
       pdu_cmp_data_w[104], 
       pdu_cmp_data_w[103], 
       pdu_cmp_data_w[102], 
       pdu_cmp_data_w[101], 
       pdu_cmp_data_w[100], 
       pdu_cmp_data_w[99], 
       pdu_cmp_data_w[98], 
       pdu_cmp_data_w[97], 
       pdu_cmp_data_w[96], 
       pdu_cmp_data_w[95], 
       pdu_cmp_data_w[94], 
       pdu_cmp_data_w[93], 
       pdu_cmp_data_w[92], 
       pdu_cmp_data_w[91], 
       pdu_cmp_data_w[90], 
       pdu_cmp_data_w[89], 
       pdu_cmp_data_w[88], 
       pdu_cmp_data_w[87], 
       pdu_cmp_data_w[86], 
       pdu_cmp_data_w[85], 
       pdu_cmp_data_w[84], 
       pdu_cmp_data_w[83], 
       pdu_cmp_data_w[82], 
       pdu_cmp_data_w[81], 
       pdu_cmp_data_w[80], 
       pdu_cmp_data_w[79], 
       pdu_cmp_data_w[78], 
       pdu_cmp_data_w[77], 
       pdu_cmp_data_w[76], 
       pdu_cmp_data_w[75], 
       pdu_cmp_data_w[74], 
       pdu_cmp_data_w[73], 
       pdu_cmp_data_w[72], 
       pdu_cmp_data_w[71], 
       pdu_cmp_data_w[70], 
       pdu_cmp_data_w[69], 
       pdu_cmp_data_w[68], 
       pdu_cmp_data_w[67], 
       pdu_cmp_data_w[66], 
       pdu_cmp_data_w[65], 
       pdu_cmp_data_w[64], 
       pdu_cmp_data_w[63], 
       pdu_cmp_data_w[62], 
       pdu_cmp_data_w[61], 
       pdu_cmp_data_w[60], 
       pdu_cmp_data_w[59], 
       pdu_cmp_data_w[58], 
       pdu_cmp_data_w[57], 
       pdu_cmp_data_w[56], 
       pdu_cmp_data_w[55], 
       pdu_cmp_data_w[54], 
       pdu_cmp_data_w[53], 
       pdu_cmp_data_w[52], 
       pdu_cmp_data_w[51], 
       pdu_cmp_data_w[50], 
       pdu_cmp_data_w[49], 
       pdu_cmp_data_w[48], 
       pdu_cmp_data_w[47], 
       pdu_cmp_data_w[46], 
       pdu_cmp_data_w[45], 
       pdu_cmp_data_w[44], 
       pdu_cmp_data_w[43], 
       pdu_cmp_data_w[42], 
       pdu_cmp_data_w[41], 
       pdu_cmp_data_w[40], 
       pdu_cmp_data_w[39], 
       pdu_cmp_data_w[38], 
       pdu_cmp_data_w[37], 
       pdu_cmp_data_w[36], 
       pdu_cmp_data_w[35], 
       pdu_cmp_data_w[34], 
       pdu_cmp_data_w[33], 
       pdu_cmp_data_w[32], 
       pdu_cmp_data_w[31], 
       pdu_cmp_data_w[30], 
       pdu_cmp_data_w[29], 
       pdu_cmp_data_w[28], 
       pdu_cmp_data_w[27], 
       pdu_cmp_data_w[26], 
       pdu_cmp_data_w[25], 
       pdu_cmp_data_w[24], 
       pdu_cmp_data_w[23], 
       pdu_cmp_data_w[22], 
       pdu_cmp_data_w[21], 
       pdu_cmp_data_w[20], 
       pdu_cmp_data_w[19], 
       pdu_cmp_data_w[18], 
       pdu_cmp_data_w[17], 
       pdu_cmp_data_w[16], 
       pdu_cmp_data_w[15], 
       pdu_cmp_data_w[14], 
       pdu_cmp_data_w[13], 
       pdu_cmp_data_w[12], 
       pdu_cmp_data_w[11], 
       pdu_cmp_data_w[10], 
       pdu_cmp_data_w[9], 
       pdu_cmp_data_w[8], 
       pdu_cmp_data_w[7], 
       pdu_cmp_data_w[6], 
       pdu_cmp_data_w[5], 
       pdu_cmp_data_w[4], 
       pdu_cmp_data_w[3], 
       pdu_cmp_data_w[2], 
       pdu_cmp_data_w[1], 
       pdu_cmp_data_w[0] 
     };

  assign data_err_c[0] = (!rx_src_rdy_n_reg && (rx_d_reg[0:63] != pdu_cmp_data_w_r[0:63]));      
  assign data_err_c[1] = (!rx_src_rdy_n_reg && (rx_d_reg[64:127] != pdu_cmp_data_w_r[64:127]));      
  assign data_err_c[2] = (!rx_src_rdy_n_reg && (rx_d_reg[128:191] != pdu_cmp_data_w_r[128:191]));      
  assign data_err_c[3] = (!rx_src_rdy_n_reg && (rx_d_reg[192:255] != pdu_cmp_data_w_r[192:255]));      

   always @(posedge USER_CLK)
     data_err_r    <=  `DLY    data_err_c; 

     always @ (posedge USER_CLK)
     begin	       
       if(reset_i)
         data_err_count_r <= `DLY 8'b0;
       else if(&data_err_count_r)
         data_err_count_r <= `DLY data_err_count_r;
       else if (|data_err_r)
         data_err_count_r <= `DLY (data_err_count_r + 1);   	 
     end

   assign  DATA_ERR_COUNT =   data_err_count_r;

 
 endmodule           
